% --- Day 24: Air Duct Spelunking ---
% You've finally met your match; the doors that provide access to the roof are locked tight, and all of the controls and related electronics are inaccessible. You simply can't reach them.
% The robot that cleans the air ducts, however, can.
% It's not a very fast little robot, but you reconfigure it to be able to interface with some of the exposed wires that have been routed through the HVAC system. If you can direct it to each of those locations, you should be able to bypass the security controls.
% You extract the duct layout for this area from some blueprints you acquired and create a map with the relevant locations marked (your puzzle input). 0 is your current location, from which the cleaning robot embarks; the other numbers are (in no particular order) the locations the robot needs to visit at least once each. Walls are marked as #, and open passages are marked as .. Numbers behave like open passages.
% For example, suppose you have a map like the following:
% ###########
% #0.1.....2#
% #.#######.#
% #4.......3#
% ###########
% To reach all of the points of interest as quickly as possible, you would have the robot take the following path:
%     0 to 4 (2 steps)
%     4 to 1 (4 steps; it can't move diagonally)
%     1 to 2 (6 steps)
%     2 to 3 (2 steps)
% Since the robot isn't very fast, you need to find it the shortest route. This path is the fewest steps (in the above example, a total of 14) required to start at 0 and then visit every other location at least once.
% Given your actual map, and starting from location 0, what is the fewest number of steps required to visit every non-0 number marked on the map at least once?
% Your puzzle answer was 412.
% --- Part Two ---
% Of course, if you leave the cleaning robot somewhere weird, someone is bound to notice.
% What is the fewest number of steps required to start at 0, visit every non-0 number marked on the map at least once, and then return to 0?
% Your puzzle answer was 664.

% speed improvements: 
%   - don't sort visited and just count length of visited (20% speedup)
%   - don't need to include start in req (de minimus)
%   - delete from req and rather than add to visited (20% speedup)
%   - prune dead ends in maze (25% speedup)
%   - part 1: 72 sec -> 36 sec -> 19 sec 
%   - part 2: 180 sec -> 125 sec
%   - use planner to find shortest paths between reqs and then
%   - use cp to get the shortest overall path that meets the constraints
%   - part 1 and 2 combined: 5 seconds

import planner.
import cp.

main =>
    % cl_facts([$show(true)]), % globally control progress printing, see my_println
    cl_facts([$show(false)]), 

    % Maze = read_file_lines("test24_2016.data").to_array,
    Maze = read_file_lines("day24_2016.data").to_array,
    save_maze(Maze,"day24_2016_pruned.data"),

    % Neibs are the neibors of each [Y,X] Maze location
    % Reqs are the required [Y,X] coordinates to visit
    [Neibs,Reqs] = prune(Maze),
    N = Reqs.len,

    % Dists is a table of distances between each pair of reqs
    Dists = new_array(N,N), bind_vars(Dist,999),
    foreach (I in 1..N-1, J in I+1..N) 
        best_plan_bin([Reqs[I],Neibs,Reqs[J]],_,C),
        Dists[I,J] := C,
        Dists[J,I] := C,
        my_println([i=I,j=J,c=C]) % see progress
    end,

    foreach (Row in Dists) my_println(Row) end, % show Dists
    
    % find the best Path from Reqs[1] that includes all other Reqs
    Path = new_list(N),
    Path :: 1..N,
    all_different(Path),
    Path[1] #= 1, % start at Req[1]
    Part1 #= sum([D : I in 1..N-1, matrix_element(Dists,Path[I+1],Path[I],D)]),
    solve([$min(Part1)],Path),
    my_println(Path), % show Path
    printf("Answer Part 1: %w\n",Part1),

    % find the best Path from Reqs[1], visit all Reqs, return to Reqs[1]
    Path2 = new_list(N+1),
    Path2 :: 1..N,
    Path2[1] #= 1, Path2[N+1] #= 1,
    all_different(slice(Path2,1,N)), % neat use of slice
    Part2 #= sum([D : I in 1..N, matrix_element(Dists,Path2[I+1],Path2[I],D)]),
    solve([$min(Part2)],Path2),
    my_println(Path2),% show Path
    printf("Answer Part 2: %w\n",Part2).

% Planner final and action states

final(S@[CurYX,_Neibs,End]), CurYX=End => true.

% multiple calls to planner cause Picat to freeze
% adding table seems to eliminate
table
action([[Y,X],Neibs,End],NextS,_,Cost) =>
    member(MoveTo,Neibs[Y,X]),
    NextS = ([MoveTo,Neibs,End]),
    Cost = 1.

% Parse maze and prune dead ends

prune(Maze) = [Neibs,Reqs] => 
    Reqs = parse_reqs(Maze),
    Neibs = parse(Maze),
    my_println(vsize_no_prune=get_size(Neibs)), % see progress
    Flag := true, % flag to keep doing this until no more prunes
    while (Flag)
        Flag := false,
        % if a [Y,X] has only one neighbor, and it isn't in Reqs 
        % the neighbor can be pruned
        foreach(Y in 1..Neibs.len, X in 1..Neibs[1].len, 
                not member([Y,X],Reqs),
                len(Neibs[Y,X]) == 1)
            Maze[Y,X] := '$', % mark pruned with $
            Flag := true,
        end,
        Neibs := parse(Maze),
        my_println(vsize_prune=get_size(Neibs)), % see progress
    end.

parse(Maze) = Neibs =>
    MaxY = Maze.len, MaxX = Maze[1].len,
    Neibs = new_array(MaxY,MaxX), bind_vars(Neibs,[]),
    foreach (Y in 1..MaxY, X in 1..MaxX, 
            MYX = Maze[Y,X],
            [DY,DX] in [[-1,0],[1,0],[0,1],[0,-1]],
            NX = X+DX, NY = Y+DY, 
            between(1,MaxY,NY), between(1,MaxX,NX),
            not member(Maze[NY,NX],['#','$']), % $ is a pruned location
            not member(MYX,['#','$']))
        Neibs[Y,X] := Neibs[Y,X] ++ [[NY,NX]]
    end.

parse_reqs(Maze) = Reqs => 
    NumLocs = [[Maze[Y,X].to_int,[Y,X]] : Y in 1..Maze.len, X in 1..Maze[1].len, not member(Maze[Y,X],['.','#','$'])],
    Reqs = [[Y,X] : [_,[Y,X]] in NumLocs.sort(1)].

% Utility functions

get_size(Neibs) = S =>
    S = 0,
    foreach(Y in 1..Neibs.len, X in 1..Neibs[1].len)
        S := S + len(Neibs[Y,X])
    end.

my_println(X) =>
    show(Show), % global fact for printing progress info
    if Show then println(X) end.

save_maze(Maze,File) =>
    show(Show),
    if Show then
        FD = open(File,write),
        foreach (Row in Maze)
            println(FD,Row)
        end,
        close(FD)
    end.


% This was much much slower than using Planner
% sp for one pair took almost a minute

% Edges = [],
% foreach (Y in 1..Neibs.len, X in 1..Neibs[1].len)
%     Neib = Neibs[Y,X],
%     foreach (N in Neib)
%         Edges := Edges ++ [[[Y,X],N]]
%     end
% end,
% time(sp(Start,End,Edges,Path,W)),
% println(W).

% shortest path adapted from Picat manual
% weight, W, of edges is always 1

% table(+,+,+,-,min)
% sp(Start,End,Edges,Path,W) ?=>
%     W = 1,
%     Path = [(Start,End)],
%     member([Start,End],Edges).

% sp(Start,End,Edges,Path,W) =>
%     Path = [(Start,Middle)|Path1],
%     member([Start,Middle],Edges),
%     sp(Middle,End,Edges,Path1,W1),
%     W = W1 + 1.

