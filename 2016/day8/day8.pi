% --- Day 8: Two-Factor Authentication ---
% You come across a door implementing what you can only assume is an implementation of two-factor authentication after a long game of requirements telephone.
% To get past the door, you first swipe a keycard (no problem; there was one on a nearby desk). Then, it displays a code on a little screen, and you type that code on a keypad. Then, presumably, the door unlocks.
% Unfortunately, the screen has been smashed. After a few minutes, you've taken everything apart and figured out how it works. Now you just have to work out what the screen would have displayed.
% The magnetic strip on the card you swiped encodes a series of instructions for the screen; these instructions are your puzzle input. The screen is 50 pixels wide and 6 pixels tall, all of which start off, and is capable of three somewhat peculiar operations:
%     rect AxB turns on all of the pixels in a rectangle at the top-left of the screen which is A wide and B tall.
%     rotate row y=A by B shifts all of the pixels in row A (0 is the top row) right by B pixels. Pixels that would fall off the right end appear at the left end of the row.
%     rotate column x=A by B shifts all of the pixels in column A (0 is the left column) down by B pixels. Pixels that would fall off the bottom appear at the top of the column.
% For example, here is a simple sequence on a smaller screen:
%     rect 3x2 creates a small rectangle in the top-left corner:
%     ###....
%     ###....
%     .......
%     rotate column x=1 by 1 rotates the second column down by one pixel:
%     #.#....
%     ###....
%     .#.....
%     rotate row y=0 by 4 rotates the top row right by four pixels:
%     ....#.#
%     ###....
%     .#.....
%     rotate column x=1 by 1 again rotates the second column down by one pixel, causing the bottom pixel to wrap back to the top:
%     .#..#.#
%     #.#....
%     .#.....
% As you can see, this display technology is extremely powerful, and will soon dominate the tiny-code-displaying-screen market. That's what the advertisement on the back of the display tries to convince you, anyway.
% There seems to be an intermediate check of the voltage used by the display: after you swipe your card, if the screen did work, how many pixels should be lit?
% Your puzzle answer was 121.
% --- Part Two ---
% You notice that the screen is only capable of displaying capital letters; in the font it uses, each letter is 5 pixels wide and 6 tall.
% After you swipe your card, what code is the screen trying to display?
% Your puzzle answer was RURUCEOEIL.
% Both parts of this puzzle are complete! They provide two gold stars: **
% At this point, you should return to your Advent calendar and try another puzzle.
% If you still want to see it, you can get your puzzle input.
% You can also [Shareon Bluesky Twitter Mastodon] this puzzle.

import util.

main =>
    % Data = read_file_lines("test.txt").map(strip),
    % H = 3, W = 7, 
    Data = read_file_lines("day.txt").map(strip),
    H = 6, W = 50,
    G = new_array(H,W),
    bind_vars(G,0),
    foreach (D in Data)
        % display(G),
        R = parse(D),
        call(R[1],G,R[2],R[3]) % dynamic dispatch!
    end,
    printf("Answer Part 1: %w\n",total(G)),
    printf("Answer Part 2:\n"),
    display(G).

dim(G,G.len,G[1].len). % util to get Width and Hight
total(G) = G.to_list.map(sum).sum. % util to get sum

rect(G,RW,RH) => 
    foreach (Y in 1..RH, X in 1..RW)
      G[Y,X] := 1
    end.

row(G,Y,By) => 
    dim(G,H,W),
    NewRow = {G[Y+1,((X-1-By) mod W)+1] : X in 1..W}, % 1 indexed
    G[Y+1]:= NewRow.
    
col(G,X,By) => 
    dim(G,H,W),
    NewCol = [G[((Y-1-By) mod H)+1,X+1] : Y in 1..H], % 1 indexed
    foreach (Y in 1..H)
        G[Y,X+1] := NewCol[Y]
    end.

parse(L) = R =>
    Ls = L.split(" "),
    (
    membchk("rect",Ls), R = [rect]++Ls[2].split("x").map(to_int);
    membchk("row",Ls), N = Ls[3].split("="),R = [row]++[N.last.to_int]++[Ls[5].to_int];
    membchk("column",Ls), N = Ls[3].split("="),R = [col]++[N.last.to_int]++[Ls[5].to_int]
   ). 


display(G) =>
    dim(G,H,W),
    foreach (Y in 1..H)
        foreach (X in 1..W)
            if G[Y,X]==0 then print(" ") else print("#") end
        end,
        printf("\n")
    end.

    % foreach (Y1 in 1..G.len, X1 in 1..G[1].len)
    %     % println((Y1,X1))
    %         G[Y1,X1]:=0
    % end.

     % change column
    % foreach (Y in 1..H)
    %     Grid[Y,5] := '*'
    % end,

    % change row
    % foreach (X in 1..W)
    %     Grid[2,X] := '*'
    % end,