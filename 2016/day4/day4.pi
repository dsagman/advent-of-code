
% aaaaa-bbb-z-y-x-123[abxyz] is a real room because the most common letters are a (5), b (3), and then a tie between x, y, and z, which are listed alphabetically.
% a-b-c-d-e-f-g-h-987[abcde] is a real room because although the letters are all tied (1 of each), the first five are listed alphabetically.
% not-a-real-room-404[oarel] is a real room.
% totally-real-room-200[decoy] is not.

% import basic.
import util.

% alphabet(A,Z) = [chr(C): C in ord(A)..ord(Z)].
% println(alphabet('a','z')),

main =>
    % Data = read_file_lines("test.txt"),
    Data = read_file_lines("day.txt"),
    Sum = 0,
    foreach(D in Data)
        (Name,Id,Check) = parse(D),
        Sum := Sum + valid_id(Name,Id,Check),
    end,
    println(Sum).

valid_id(Name,Id,Check) = V =>
    NameCounts= ([[N,Ns] : N in sort_remove_dups(Name), Ns = count_all(member(N,Name))]).sort_down(2),    
    NameVals = [N[2] : N in NameCounts].sort_down_remove_dups, 
    TrueCheckSum = [[X : X in NameCounts, X[2]=NV].sort(1) : NV in NameVals].flatten.take(10),
    
    TestCheckSum = [[C,Cs] : C in Check, Cs = count_all(member(C,Name))].flatten,
    
    V = cond((TrueCheckSum==TestCheckSum),Id,0).




% 137896

parse(D) = (Name,Id,Check) =>
    S = split(D.strip, "-"),
    Name = slice(S, 1, S.length-1).flatten,
    Id = slice(S.last,1,3).to_int,
    Check = slice(S.last,5,9).

% S = delete_all(D.strip, '-'),
    % Split = D.length-9,
    % Name = slice(D,1,Split-2),
    % Id = slice(D,Split,Split+2).to_int,
    % Check = slice(D,Split+4,Split+8).







