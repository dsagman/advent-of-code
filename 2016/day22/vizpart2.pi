
import util.


main =>
    Data = read_file_lines("day.txt").drop(2).map(split).map(parse),
    Plan = [S.map(to_int) : S in read_file_lines("part2.txt").map(split)],

    G = make_grid(Data),
    Globals = get_global_map(),
    Globals.put(bounds,G.bounds), 
    [W,_,H,_] = get_global_map().get(bounds),
    Home     = [0,0],
    Goal     = [W,0],
    Hole     = [K : (K = [_,U,_]) in G, U == 0].head,
    HoleSize = get(G,Hole).head, % open space
    OK       = [K : (K = [_,U,_]) in G, U <= HoleSize], 
    Globals.put(ok,OK), 


    printf("%c[?25l", chr(27)), % hide cursor
    printf("%c[2J%c[H", chr(27), chr(27)), % clear screen
    foreach(I in 1..Plan.len)
        printf("%c[H", chr(27)), 
        if Plan[I] == Goal then Goal := Plan[I-1] end,
        printGrid(Home,Goal,Plan[I]),
        command("sleep .05") = Return
    end,
    printf("%c[?25h", chr(27)). % show cursor



printGrid(Home,Goal,Hole) =>
    Globals = get_global_map(),
    [MaxX,MinX,MaxY,MinY] = Globals.get(bounds),
    OK = Globals.get(ok),
    println(new_list(1+(MaxX-MinX)*2, '=')),
    foreach(Y in MinY..MaxY)
        foreach(X in MinX..MaxX) 
            ([X,Y] = Goal, print('G');
             [X,Y] = Home, print('H');
             [X,Y] = Hole, print('_'); 
             membchk([X,Y],OK), print('.');
             print('#')), % not OK
             print(' ')  
        end,
        nl
    end,       
    println(new_list(1+(MaxX-MinX)*2, '=')).   


% /dev/grid/node-x0-y0     93T   67T    26T   72%
% Filesystem              Size  Used  Avail  Use%
parse([Fs,Size,Used,Avail,Pct]) = [[X,Y],[S,U,A]] =>
    Fs := Fs.split("-"),
    X = Fs[2].drop(1).to_int,
    Y = Fs[3].drop(1).to_int,
    S = Size.take(Size.len-1).to_int,
    U = Used.take(Used.len-1).to_int,
    A = Avail.take(Avail.len-1).to_int.

bounds(G) = [G.keys.map(first).max, G.keys.map(first).min,
             G.keys.map(last).max,  G.keys.map(last).min].

make_grid(Data) = G =>
    G = new_map(),
    foreach (D in Data)
        put(G, D[1], D[2])
    end.

     

        

